YT Video Ref:  https://www.youtube.com/watch?v=SF1k_Twr9cg

Stage-1:
- Build the authentication system
- Create superuser

Stage-2:
- Create room app
- Create "room" model
    - Create auto slugify functionality in the django admin panel
- Show all the available rooms
    - Make search functionality for all the available rooms
    - Make filter functionality of the chat-rooms
- Create room-detail view (Chats will be established here)
- Create a chat-consumer
    - Define that consumer into the 'routing.py' file
    - Define the ProtocolTypeRouter inside the "chatSystem/asgi.py" file.
        This allows us to use different protocols for our requests.
- Joining to a chat
    - Enable redis on docker. cmds below
        docker ps -a
        docker exec -it docker-redis bash
    - Connect frontend websocket to backend consumer

Stage-3:
- Sending messages
    - Get the username into the websocket-enabled script.
    - Parse the data into js-object which is sent from the backend.
    - Check if the data is not empty.
    - Append the entire CHAT-BLOCK into the HTML & interpolate the required data using js.
- Storing messages
    - Create a new model to store the messages.
    - Populate some sample msg & display them into frontend msg.
    - Store the messages into db from chatConsumer using "sync_to_async"
- Scrolling to the bottom








################# Email Verification
- Currently Google doesn't allow any 3rd party app to use its email service,
    thus they provide app-password.
    Collected a solution to from stackoverflow.
    [Ref]:
    - https://stackoverflow.com/a/28421995
- Referencing the URL to acquire an app password.
    - https://support.google.com/accounts/answer/185833

################# Password Reset
Ref: https://dev.to/earthcomfy/django-reset-password-3k0l
- User can reset their account password through mails from the login-screen.
    - Implemented closable flash-msg to the forms regarding password-reset-process.




-------------------------------------------- Backlogs
# Define functionality for active users in each channel. [Done; documentation is yet to complete]
# TODO: Check whether the user has an active status while logging-in,
    If not then remind him of activating his/her account using email verification, which is yet to complete.
    If the token is lost, provide a function for generating another email-verification token.
# TODO: When a user is deleted, ensure his/her messages retained afterwards as "Anonymous User".
# TODO: Give profile settings for users. Define & make a list of settings.
    - Reset password; Check the previous password before letting the user reset password.
# TODO: Option for newly registered users to request for regenerating email-verification-token & mail them
    if they accidentally lose them. The requests will be enlisted to the **support-platform**.